{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Batch Normalization\n",
    "\n",
    "利点:\n",
    "\n",
    "- 学習を早く進行させることができる\n",
    "- 初期値にそれほど依存しない\n",
    "  - あんまり凝って初期値を設定する必要がない\n",
    "- 過学習を抑制する"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "強制的にノーマライズ(0 ~ 1)を行う。\n",
    "実際には、正規化後に多少値をいじる。それがスケーリング(乗算)とシフト(加算)。\n",
    "\n",
    "このスケーリングとシフトも学習対象で、学習させながら適宜調整する。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "============== 1/16 ==============\n",
      "epoch:0 | 0.097 - 0.108\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\anzuy\\Project\\ManteraStudio-ReadingCircle-DeepLearningFromScratch\\source\\sample\\common\\multi_layer_net_extend.py:101: RuntimeWarning: overflow encountered in square\n",
      "  weight_decay += 0.5 * self.weight_decay_lambda * np.sum(W**2)\n",
      "C:\\Users\\anzuy\\Project\\ManteraStudio-ReadingCircle-DeepLearningFromScratch\\source\\sample\\common\\multi_layer_net_extend.py:101: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  weight_decay += 0.5 * self.weight_decay_lambda * np.sum(W**2)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch:1 | 0.097 - 0.15\n",
      "epoch:2 | 0.097 - 0.174\n",
      "epoch:3 | 0.097 - 0.191\n",
      "epoch:4 | 0.097 - 0.215\n",
      "epoch:5 | 0.097 - 0.233\n",
      "epoch:6 | 0.097 - 0.243\n",
      "epoch:7 | 0.097 - 0.25\n",
      "epoch:8 | 0.097 - 0.273\n",
      "epoch:9 | 0.097 - 0.282\n",
      "epoch:10 | 0.097 - 0.299\n",
      "epoch:11 | 0.097 - 0.299\n",
      "epoch:12 | 0.097 - 0.308\n",
      "epoch:13 | 0.097 - 0.332\n",
      "epoch:14 | 0.097 - 0.344\n",
      "epoch:15 | 0.097 - 0.359\n",
      "epoch:16 | 0.097 - 0.377\n",
      "epoch:17 | 0.097 - 0.381\n",
      "epoch:18 | 0.097 - 0.387\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch:19 | 0.097 - 0.399\n",
      "============== 2/16 ==============\n",
      "epoch:0 | 0.097 - 0.097\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\anzuy\\Project\\ManteraStudio-ReadingCircle-DeepLearningFromScratch\\source\\sample\\common\\multi_layer_net_extend.py:101: RuntimeWarning: overflow encountered in square\n",
      "  weight_decay += 0.5 * self.weight_decay_lambda * np.sum(W**2)\n",
      "C:\\Users\\anzuy\\Project\\ManteraStudio-ReadingCircle-DeepLearningFromScratch\\source\\sample\\common\\multi_layer_net_extend.py:101: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  weight_decay += 0.5 * self.weight_decay_lambda * np.sum(W**2)\n",
      "c:\\users\\anzuy\\project\\manterastudio-readingcircle-deeplearningfromscratch\\.venv\\lib\\site-packages\\numpy\\core\\fromnumeric.py:87: RuntimeWarning: overflow encountered in reduce\n",
      "  return ufunc.reduce(obj, axis, dtype, out, **passkwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch:1 | 0.097 - 0.097\n",
      "epoch:2 | 0.097 - 0.127\n",
      "epoch:3 | 0.097 - 0.18\n",
      "epoch:4 | 0.097 - 0.193\n",
      "epoch:5 | 0.097 - 0.212\n",
      "epoch:6 | 0.097 - 0.236\n",
      "epoch:7 | 0.097 - 0.259\n",
      "epoch:8 | 0.097 - 0.279\n",
      "epoch:9 | 0.097 - 0.296\n",
      "epoch:10 | 0.097 - 0.324\n",
      "epoch:11 | 0.097 - 0.352\n",
      "epoch:12 | 0.097 - 0.365\n",
      "epoch:13 | 0.097 - 0.38\n",
      "epoch:14 | 0.097 - 0.413\n",
      "epoch:15 | 0.097 - 0.431\n",
      "epoch:16 | 0.097 - 0.449\n",
      "epoch:17 | 0.097 - 0.468\n",
      "epoch:18 | 0.097 - 0.477\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch:19 | 0.097 - 0.499\n",
      "============== 3/16 ==============\n",
      "epoch:0 | 0.144 - 0.09\n",
      "epoch:1 | 0.339 - 0.084\n",
      "epoch:2 | 0.503 - 0.121\n",
      "epoch:3 | 0.601 - 0.175\n",
      "epoch:4 | 0.701 - 0.204\n",
      "epoch:5 | 0.754 - 0.242\n",
      "epoch:6 | 0.811 - 0.278\n",
      "epoch:7 | 0.847 - 0.321\n",
      "epoch:8 | 0.882 - 0.345\n",
      "epoch:9 | 0.903 - 0.365\n",
      "epoch:10 | 0.927 - 0.391\n",
      "epoch:11 | 0.942 - 0.41\n",
      "epoch:12 | 0.956 - 0.449\n",
      "epoch:13 | 0.961 - 0.471\n",
      "epoch:14 | 0.968 - 0.491\n",
      "epoch:15 | 0.974 - 0.509\n",
      "epoch:16 | 0.98 - 0.529\n",
      "epoch:17 | 0.986 - 0.548\n",
      "epoch:18 | 0.988 - 0.557\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch:19 | 0.991 - 0.576\n",
      "============== 4/16 ==============\n",
      "epoch:0 | 0.143 - 0.091\n",
      "epoch:1 | 0.318 - 0.115\n",
      "epoch:2 | 0.475 - 0.186\n",
      "epoch:3 | 0.577 - 0.291\n",
      "epoch:4 | 0.601 - 0.339\n",
      "epoch:5 | 0.648 - 0.398\n",
      "epoch:6 | 0.696 - 0.443\n",
      "epoch:7 | 0.703 - 0.501\n",
      "epoch:8 | 0.729 - 0.535\n",
      "epoch:9 | 0.755 - 0.588\n",
      "epoch:10 | 0.758 - 0.619\n",
      "epoch:11 | 0.782 - 0.649\n",
      "epoch:12 | 0.799 - 0.664\n",
      "epoch:13 | 0.816 - 0.696\n",
      "epoch:14 | 0.809 - 0.709\n",
      "epoch:15 | 0.821 - 0.725\n",
      "epoch:16 | 0.828 - 0.746\n",
      "epoch:17 | 0.84 - 0.765\n",
      "epoch:18 | 0.857 - 0.786\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch:19 | 0.857 - 0.794\n",
      "============== 5/16 ==============\n",
      "epoch:0 | 0.089 - 0.113\n",
      "epoch:1 | 0.092 - 0.136\n",
      "epoch:2 | 0.095 - 0.256\n",
      "epoch:3 | 0.096 - 0.377\n",
      "epoch:4 | 0.1 - 0.491\n",
      "epoch:5 | 0.11 - 0.554\n",
      "epoch:6 | 0.111 - 0.623\n",
      "epoch:7 | 0.125 - 0.665\n",
      "epoch:8 | 0.133 - 0.704\n",
      "epoch:9 | 0.148 - 0.726\n",
      "epoch:10 | 0.16 - 0.754\n",
      "epoch:11 | 0.171 - 0.774\n",
      "epoch:12 | 0.178 - 0.797\n",
      "epoch:13 | 0.182 - 0.81\n",
      "epoch:14 | 0.194 - 0.828\n",
      "epoch:15 | 0.199 - 0.834\n",
      "epoch:16 | 0.191 - 0.836\n",
      "epoch:17 | 0.181 - 0.853\n",
      "epoch:18 | 0.177 - 0.864\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch:19 | 0.176 - 0.874\n",
      "============== 6/16 ==============\n",
      "epoch:0 | 0.113 - 0.11\n",
      "epoch:1 | 0.169 - 0.155\n",
      "epoch:2 | 0.118 - 0.326\n",
      "epoch:3 | 0.12 - 0.55\n",
      "epoch:4 | 0.117 - 0.658\n",
      "epoch:5 | 0.127 - 0.717\n",
      "epoch:6 | 0.131 - 0.772\n",
      "epoch:7 | 0.117 - 0.791\n",
      "epoch:8 | 0.117 - 0.807\n",
      "epoch:9 | 0.117 - 0.823\n",
      "epoch:10 | 0.12 - 0.843\n",
      "epoch:11 | 0.117 - 0.866\n",
      "epoch:12 | 0.117 - 0.882\n",
      "epoch:13 | 0.117 - 0.896\n",
      "epoch:14 | 0.117 - 0.911\n",
      "epoch:15 | 0.117 - 0.916\n",
      "epoch:16 | 0.132 - 0.929\n",
      "epoch:17 | 0.158 - 0.938\n",
      "epoch:18 | 0.117 - 0.947\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch:19 | 0.117 - 0.954\n",
      "============== 7/16 ==============\n",
      "epoch:0 | 0.117 - 0.089\n",
      "epoch:1 | 0.117 - 0.355\n",
      "epoch:2 | 0.116 - 0.588\n",
      "epoch:3 | 0.117 - 0.689\n",
      "epoch:4 | 0.117 - 0.754\n",
      "epoch:5 | 0.117 - 0.793\n",
      "epoch:6 | 0.117 - 0.837\n",
      "epoch:7 | 0.117 - 0.858\n",
      "epoch:8 | 0.117 - 0.883\n",
      "epoch:9 | 0.117 - 0.905\n",
      "epoch:10 | 0.116 - 0.921\n",
      "epoch:11 | 0.116 - 0.933\n",
      "epoch:12 | 0.116 - 0.949\n",
      "epoch:13 | 0.116 - 0.956\n",
      "epoch:14 | 0.116 - 0.968\n",
      "epoch:15 | 0.116 - 0.979\n",
      "epoch:16 | 0.116 - 0.981\n",
      "epoch:17 | 0.116 - 0.987\n",
      "epoch:18 | 0.116 - 0.987\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch:19 | 0.117 - 0.989\n",
      "============== 8/16 ==============\n",
      "epoch:0 | 0.116 - 0.115\n",
      "epoch:1 | 0.116 - 0.46\n",
      "epoch:2 | 0.116 - 0.642\n",
      "epoch:3 | 0.116 - 0.763\n",
      "epoch:4 | 0.116 - 0.811\n",
      "epoch:5 | 0.116 - 0.845\n",
      "epoch:6 | 0.116 - 0.885\n",
      "epoch:7 | 0.116 - 0.924\n",
      "epoch:8 | 0.116 - 0.952\n",
      "epoch:9 | 0.116 - 0.965\n",
      "epoch:10 | 0.116 - 0.978\n",
      "epoch:11 | 0.116 - 0.983\n",
      "epoch:12 | 0.116 - 0.991\n",
      "epoch:13 | 0.116 - 0.992\n",
      "epoch:14 | 0.116 - 0.992\n",
      "epoch:15 | 0.116 - 0.995\n",
      "epoch:16 | 0.116 - 0.998\n",
      "epoch:17 | 0.116 - 0.998\n",
      "epoch:18 | 0.116 - 0.999\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch:19 | 0.116 - 0.999\n",
      "============== 9/16 ==============\n",
      "epoch:0 | 0.094 - 0.172\n",
      "epoch:1 | 0.097 - 0.546\n",
      "epoch:2 | 0.099 - 0.648\n",
      "epoch:3 | 0.117 - 0.679\n",
      "epoch:4 | 0.117 - 0.725\n",
      "epoch:5 | 0.117 - 0.8\n",
      "epoch:6 | 0.117 - 0.863\n",
      "epoch:7 | 0.117 - 0.928\n",
      "epoch:8 | 0.117 - 0.965\n",
      "epoch:9 | 0.117 - 0.981\n",
      "epoch:10 | 0.117 - 0.987\n",
      "epoch:11 | 0.117 - 0.992\n",
      "epoch:12 | 0.117 - 0.996\n",
      "epoch:13 | 0.117 - 0.997\n",
      "epoch:14 | 0.117 - 0.996\n",
      "epoch:15 | 0.117 - 0.997\n",
      "epoch:16 | 0.117 - 0.998\n",
      "epoch:17 | 0.117 - 0.999\n",
      "epoch:18 | 0.117 - 0.999\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch:19 | 0.117 - 0.999\n",
      "============== 10/16 ==============\n",
      "epoch:0 | 0.099 - 0.155\n",
      "epoch:1 | 0.116 - 0.648\n",
      "epoch:2 | 0.116 - 0.785\n",
      "epoch:3 | 0.117 - 0.793\n",
      "epoch:4 | 0.117 - 0.811\n",
      "epoch:5 | 0.116 - 0.877\n",
      "epoch:6 | 0.116 - 0.929\n",
      "epoch:7 | 0.116 - 0.968\n",
      "epoch:8 | 0.116 - 0.974\n",
      "epoch:9 | 0.117 - 0.958\n",
      "epoch:10 | 0.117 - 0.99\n",
      "epoch:11 | 0.117 - 0.991\n",
      "epoch:12 | 0.117 - 0.919\n",
      "epoch:13 | 0.117 - 0.992\n",
      "epoch:14 | 0.117 - 0.996\n",
      "epoch:15 | 0.117 - 0.997\n",
      "epoch:16 | 0.117 - 0.997\n",
      "epoch:17 | 0.117 - 0.997\n",
      "epoch:18 | 0.117 - 0.995\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch:19 | 0.117 - 0.997\n",
      "============== 11/16 ==============\n",
      "epoch:0 | 0.117 - 0.099\n",
      "epoch:1 | 0.117 - 0.637\n",
      "epoch:2 | 0.117 - 0.635\n",
      "epoch:3 | 0.117 - 0.596\n",
      "epoch:4 | 0.117 - 0.772\n",
      "epoch:5 | 0.117 - 0.828\n",
      "epoch:6 | 0.117 - 0.85\n",
      "epoch:7 | 0.116 - 0.954\n",
      "epoch:8 | 0.116 - 0.971\n",
      "epoch:9 | 0.117 - 0.981\n",
      "epoch:10 | 0.117 - 0.984\n",
      "epoch:11 | 0.117 - 0.977\n",
      "epoch:12 | 0.116 - 0.99\n",
      "epoch:13 | 0.116 - 0.994\n",
      "epoch:14 | 0.116 - 0.987\n",
      "epoch:15 | 0.116 - 0.995\n",
      "epoch:16 | 0.116 - 0.995\n",
      "epoch:17 | 0.116 - 0.996\n",
      "epoch:18 | 0.116 - 0.991\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch:19 | 0.116 - 0.997\n",
      "============== 12/16 ==============\n",
      "epoch:0 | 0.105 - 0.151\n",
      "epoch:1 | 0.117 - 0.579\n",
      "epoch:2 | 0.117 - 0.644\n",
      "epoch:3 | 0.116 - 0.754\n",
      "epoch:4 | 0.116 - 0.765\n",
      "epoch:5 | 0.116 - 0.648\n",
      "epoch:6 | 0.116 - 0.85\n",
      "epoch:7 | 0.116 - 0.872\n",
      "epoch:8 | 0.116 - 0.875\n",
      "epoch:9 | 0.117 - 0.885\n",
      "epoch:10 | 0.117 - 0.881\n",
      "epoch:11 | 0.116 - 0.973\n",
      "epoch:12 | 0.117 - 0.982\n",
      "epoch:13 | 0.117 - 0.985\n",
      "epoch:14 | 0.117 - 0.988\n",
      "epoch:15 | 0.117 - 0.985\n",
      "epoch:16 | 0.117 - 0.988\n",
      "epoch:17 | 0.117 - 0.987\n",
      "epoch:18 | 0.117 - 0.988\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch:19 | 0.117 - 0.989\n",
      "============== 13/16 ==============\n",
      "epoch:0 | 0.105 - 0.103\n",
      "epoch:1 | 0.117 - 0.435\n",
      "epoch:2 | 0.117 - 0.541\n",
      "epoch:3 | 0.117 - 0.564\n",
      "epoch:4 | 0.117 - 0.664\n",
      "epoch:5 | 0.117 - 0.672\n",
      "epoch:6 | 0.117 - 0.676\n",
      "epoch:7 | 0.117 - 0.657\n",
      "epoch:8 | 0.116 - 0.706\n",
      "epoch:9 | 0.116 - 0.712\n",
      "epoch:10 | 0.116 - 0.709\n",
      "epoch:11 | 0.116 - 0.805\n",
      "epoch:12 | 0.116 - 0.782\n",
      "epoch:13 | 0.116 - 0.803\n",
      "epoch:14 | 0.117 - 0.804\n",
      "epoch:15 | 0.116 - 0.807\n",
      "epoch:16 | 0.117 - 0.811\n",
      "epoch:17 | 0.117 - 0.81\n",
      "epoch:18 | 0.117 - 0.81\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch:19 | 0.117 - 0.805\n",
      "============== 14/16 ==============\n",
      "epoch:0 | 0.117 - 0.118\n",
      "epoch:1 | 0.117 - 0.298\n",
      "epoch:2 | 0.117 - 0.382\n",
      "epoch:3 | 0.117 - 0.484\n",
      "epoch:4 | 0.117 - 0.491\n",
      "epoch:5 | 0.117 - 0.488\n",
      "epoch:6 | 0.117 - 0.452\n",
      "epoch:7 | 0.117 - 0.503\n",
      "epoch:8 | 0.117 - 0.504\n",
      "epoch:9 | 0.117 - 0.493\n",
      "epoch:10 | 0.117 - 0.516\n",
      "epoch:11 | 0.117 - 0.514\n",
      "epoch:12 | 0.117 - 0.512\n",
      "epoch:13 | 0.117 - 0.513\n",
      "epoch:14 | 0.117 - 0.515\n",
      "epoch:15 | 0.117 - 0.572\n",
      "epoch:16 | 0.117 - 0.565\n",
      "epoch:17 | 0.117 - 0.577\n",
      "epoch:18 | 0.117 - 0.586\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch:19 | 0.117 - 0.609\n",
      "============== 15/16 ==============\n",
      "epoch:0 | 0.097 - 0.097\n",
      "epoch:1 | 0.116 - 0.22\n",
      "epoch:2 | 0.116 - 0.383\n",
      "epoch:3 | 0.116 - 0.403\n",
      "epoch:4 | 0.116 - 0.425\n",
      "epoch:5 | 0.116 - 0.412\n",
      "epoch:6 | 0.116 - 0.418\n",
      "epoch:7 | 0.116 - 0.415\n",
      "epoch:8 | 0.116 - 0.429\n",
      "epoch:9 | 0.117 - 0.431\n",
      "epoch:10 | 0.117 - 0.432\n",
      "epoch:11 | 0.117 - 0.426\n",
      "epoch:12 | 0.117 - 0.431\n",
      "epoch:13 | 0.117 - 0.432\n",
      "epoch:14 | 0.117 - 0.431\n",
      "epoch:15 | 0.117 - 0.432\n",
      "epoch:16 | 0.117 - 0.433\n",
      "epoch:17 | 0.117 - 0.524\n",
      "epoch:18 | 0.117 - 0.51\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch:19 | 0.117 - 0.525\n",
      "============== 16/16 ==============\n",
      "epoch:0 | 0.087 - 0.125\n",
      "epoch:1 | 0.117 - 0.257\n",
      "epoch:2 | 0.117 - 0.305\n",
      "epoch:3 | 0.117 - 0.324\n",
      "epoch:4 | 0.117 - 0.325\n",
      "epoch:5 | 0.117 - 0.323\n",
      "epoch:6 | 0.117 - 0.324\n",
      "epoch:7 | 0.117 - 0.396\n",
      "epoch:8 | 0.117 - 0.396\n",
      "epoch:9 | 0.117 - 0.43\n",
      "epoch:10 | 0.117 - 0.43\n",
      "epoch:11 | 0.117 - 0.414\n",
      "epoch:12 | 0.117 - 0.429\n",
      "epoch:13 | 0.117 - 0.42\n",
      "epoch:14 | 0.117 - 0.431\n",
      "epoch:15 | 0.117 - 0.422\n",
      "epoch:16 | 0.117 - 0.428\n",
      "epoch:17 | 0.117 - 0.431\n",
      "epoch:18 | 0.117 - 0.413\n",
      "epoch:19 | 0.117 - 0.43\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 16 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import sys, os\n",
    "sys.path.append(os.path.abspath(os.path.join('..', 'sample')))\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from dataset.mnist import load_mnist\n",
    "from common.multi_layer_net_extend import MultiLayerNetExtend\n",
    "from common.optimizer import SGD, Adam\n",
    "\n",
    "(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True)\n",
    "\n",
    "# 学習データを削減\n",
    "x_train = x_train[:1000]\n",
    "t_train = t_train[:1000]\n",
    "\n",
    "max_epochs = 20\n",
    "train_size = x_train.shape[0]\n",
    "batch_size = 100\n",
    "learning_rate = 0.01\n",
    "\n",
    "\n",
    "def __train(weight_init_std):\n",
    "    bn_network = MultiLayerNetExtend(input_size=784, hidden_size_list=[100, 100, 100, 100, 100], output_size=10, \n",
    "                                    weight_init_std=weight_init_std, use_batchnorm=True)\n",
    "    network = MultiLayerNetExtend(input_size=784, hidden_size_list=[100, 100, 100, 100, 100], output_size=10,\n",
    "                                weight_init_std=weight_init_std)\n",
    "    optimizer = SGD(lr=learning_rate)\n",
    "    \n",
    "    train_acc_list = []\n",
    "    bn_train_acc_list = []\n",
    "    \n",
    "    iter_per_epoch = max(train_size / batch_size, 1)\n",
    "    epoch_cnt = 0\n",
    "    \n",
    "    for i in range(1000000000):\n",
    "        batch_mask = np.random.choice(train_size, batch_size)\n",
    "        x_batch = x_train[batch_mask]\n",
    "        t_batch = t_train[batch_mask]\n",
    "    \n",
    "        for _network in (bn_network, network):\n",
    "            grads = _network.gradient(x_batch, t_batch)\n",
    "            optimizer.update(_network.params, grads)\n",
    "    \n",
    "        if i % iter_per_epoch == 0:\n",
    "            train_acc = network.accuracy(x_train, t_train)\n",
    "            bn_train_acc = bn_network.accuracy(x_train, t_train)\n",
    "            train_acc_list.append(train_acc)\n",
    "            bn_train_acc_list.append(bn_train_acc)\n",
    "    \n",
    "            print(\"epoch:\" + str(epoch_cnt) + \" | \" + str(train_acc) + \" - \" + str(bn_train_acc))\n",
    "    \n",
    "            epoch_cnt += 1\n",
    "            if epoch_cnt >= max_epochs:\n",
    "                break\n",
    "                \n",
    "    return train_acc_list, bn_train_acc_list\n",
    "\n",
    "\n",
    "# 3.グラフの描画==========\n",
    "weight_scale_list = np.logspace(0, -4, num=16)\n",
    "x = np.arange(max_epochs)\n",
    "\n",
    "for i, w in enumerate(weight_scale_list):\n",
    "    print( \"============== \" + str(i+1) + \"/16\" + \" ==============\")\n",
    "    train_acc_list, bn_train_acc_list = __train(w)\n",
    "    \n",
    "    plt.subplot(4,4,i+1)\n",
    "    plt.title(\"W:\" + str(w))\n",
    "    if i == 15:\n",
    "        plt.plot(x, bn_train_acc_list, label='Batch Normalization', markevery=2)\n",
    "        plt.plot(x, train_acc_list, linestyle = \"--\", label='Normal(without BatchNorm)', markevery=2)\n",
    "    else:\n",
    "        plt.plot(x, bn_train_acc_list, markevery=2)\n",
    "        plt.plot(x, train_acc_list, linestyle=\"--\", markevery=2)\n",
    "\n",
    "    plt.ylim(0, 1.0)\n",
    "    if i % 4:\n",
    "        plt.yticks([])\n",
    "    else:\n",
    "        plt.ylabel(\"accuracy\")\n",
    "    if i < 12:\n",
    "        plt.xticks([])\n",
    "    else:\n",
    "        plt.xlabel(\"epochs\")\n",
    "    plt.legend(loc='lower right')\n",
    "    \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "一部ではバッチノーマライズをしないほうが良いと出ているが、全体を見るとバッチノーマライゼーションを入れたほうが学習しているのがわかる。"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
